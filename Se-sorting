In selection sort, the smallest value among the unsorted elements of the array is selected in every pass and inserted to its appropriate position into the array. 
It is also the simplest algorithm. It is an in-place comparison sorting algorithm. In this algorithm, the array is divided into two parts, 
first is sorted part, and another one is the unsorted part. Initially, the sorted part of the array is empty, 
and unsorted part is the given array. Sorted part is placed at the left, while the unsorted part is placed at the right.

Time complexity -
Best Case - O(n2)
Average Case - O(n2)
Worst Case - O(n2)

package dsa;

import java.util.Arrays;

public class SelectionSort {

	public static void main(String[] args)
	{
		int [] arr= {35,19,50,44,20};
		selection(arr);
		System.out.println(Arrays.toString(arr));
	}
         static void selection(int [] arr)
            {
	          for(int i=0; i<arr.length; i++)
	           {
		         int last = arr.length-i-1;
		         int maxIndex = getMaxIndex(arr,0,last);
		         swap(arr,maxIndex,last);		
	            }
            }
          static void swap(int []arr, int first, int second)
          {
	           int temp =arr[first];
	           arr[first]=arr[second];
	           arr[second]=temp;
          }
         static int getMaxIndex(int []arr , int start , int end)
         {
         	int max =start;
        	for(int i=start; i<=end;i++)
         	{
	     	if(arr[max]<arr[i])
	         	{
		         	max=i;
		         }
	        }
	    return max;
        } 

}

Shell sort is a generalized version of the insertion sort algorithm.
It first sorts elements that are far apart from each other and successively reduces the interval between the elements to be sorted.
The interval between the elements is reduced based on the sequence used.

Time Complexity--
Best Case	O(n*logn)
Average Case	O(n*log(n)2)
Worst Case	O(n2)
Space Complexity - O(1)
---------------------------------------------------------------------------------------
package dsa;

public class ShellSort {

	public static void main(String[] args)
	{
		 int a[] = { 30, 28, 37, 5, 9, 14, 22, 39 };  
		    int n = a.length;  
		    System.out.println("Before sorting array elements are -");  
		    printArr(a, n); 
		    System.out.println();
		    shell(a, n);  
		    System.out.println("After applying shell sort, the array elements are -");    
		    printArr(a, n);  	
    }
/* function to print the array elements */       
	static void printArr(int a[], int n) 
	{  
	    int i;  
	    for (i = 0; i < n; i++)  
	        System.out.print(a[i] + " ");  
	}  
    
	
/* function to implement shellSort */  
	static void shell(int a[], int n)  
	{  
/* Rearrange the array elements at n/2, n/4, ..., 1 intervals */  
	    for (int interval=n/2; interval>0; interval/= 2)  
	    {  
	        for (int i=interval; i<n; i+= 1)  
	        {  
/* store a[i] to the variable temp and make the ith position empty */  
	            int temp = a[i];  
	            int j;        
	            for (j = i; j >= interval && a[j - interval] > temp; j -= interval)  
	                a[j] = a[j - interval];  
	              
/* put temp (the original a[i]) in its correct  position */  
	            a[j] = temp;  
	        }  
	    }  
	}  
}

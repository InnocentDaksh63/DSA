Binary search follows the divide and conquer approach in which the list is divided into two halves, 
and the item is compared with the middle element of the list. If the match is found then,
the location of the middle element is returned. Otherwise, we search into either of the halves depending upon the result produced through the match.

NOTE: Binary search can be implemented on sorted array elements. If the list elements are not arranged in a sorted manner, we have first to sort them.
Time Complexity
Best Case	O(1)
Average Case	O(logn)
Worst Case	O(logn)

Space Complexity	O(1)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package dsa;

public class BinarySearch1 {

	public static void main(String[] args) 
	{
        int []arr= { 2,4,6,8,10,12,14,16,18,20};
        int target=8;
        int ans = binarySearch(arr,target);
     System.out.println("Element is found at index:"+ans);
	}
     static int binarySearch(int []arr , int target)
     {
    	 int start = 0;
    	 int end= arr.length-1;
    	 while(start <=end)
    	 {
    		 int mid = start + (end-start)/2;
    		 if(target<arr[mid])
    		 {
    			 end=mid-1;
    		 }
    		 else if(target>arr[mid])
    		 {
    			start=mid+1; 
    		 }
    		 else
    		 {
    			 return  mid;
    		 }
    	 }
    	 return -1;
     }
}
